import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
import xgboost as xgb
from sklearn.metrics import mean_absolute_error, mean_squared_error
import matplotlib.pyplot as plt
import seaborn as sns
import joblib


df = pd.read_csv('/content/shopping_behavior_updated.csv')  


df['is_subscribed'] = df['Subscription Status'].map({'Yes': 1, 'No': 0})
df['used_promo'] = df['Promo Code Used'].map({'Yes': 1, 'No': 0})
df['Discount Applied'] = df['Discount Applied'].map({'Yes': 1, 'No': 0}) 

df['Review Rating'] = pd.to_numeric(df['Review Rating'], errors='coerce')


df.fillna(0, inplace=True)

amount_col = [col for col in df.columns if 'Purchase Amount' in col][0]

rfm = df.groupby('Customer ID').agg(
    frequency=(amount_col, 'count'),
    monetary=(amount_col, 'sum'),
    avg_rating=('Review Rating', 'mean'),
    previous_purchases=('Previous Purchases', 'max'),
    avg_discount=('Discount Applied', 'mean'),
    is_subscribed=('is_subscribed', 'max'),
    promo_uses=('used_promo', 'sum')
).reset_index()


rfm['aov'] = rfm['monetary'] / rfm['frequency']  
rfm['purchase_freq'] = rfm['frequency'] / rfm['previous_purchases'].clip(lower=1)  


rfm['ltv'] = rfm['aov'] * rfm['frequency'] * 12  


X = rfm.drop(['Customer ID', 'ltv'], axis=1)
y = rfm['ltv']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


model = xgb.XGBRegressor(
    objective='reg:squarederror',
    n_estimators=100,
    max_depth=5,
    learning_rate=0.1
)
model.fit(X_train, y_train)


y_pred = model.predict(X_test)


mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred)) 
print(f"MAE: ${mae:.2f}")
print(f"RMSE: ${rmse:.2f}")


plt.figure(figsize=(10, 6))
xgb.plot_importance(model)
plt.title('Feature Importance')
plt.show()


rfm['predicted_ltv'] = model.predict(X)


rfm['segment'] = pd.qcut(rfm['predicted_ltv'],
                        q=4,
                        labels=['Low', 'Medium', 'High', 'VIP'])


plt.figure(figsize=(10, 6))
sns.boxplot(x='segment', y='predicted_ltv', data=rfm)
plt.title('LTV Distribution by Segment')
plt.ylabel('Predicted LTV ($)')
plt.show()


rfm[['Customer ID', 'predicted_ltv', 'segment'] + X.columns.tolist()].to_csv('customer_ltv_predictions.csv', index=False)


joblib.dump(model, 'ltv_model.pkl')

print("âœ… Model training complete! Check:")
print("- customer_ltv_predictions.csv (All predictions with features)")
print("- ltv_model.pkl (Trained model)")
print("- Visualizations shown above")
